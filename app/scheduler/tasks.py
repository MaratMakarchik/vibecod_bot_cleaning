# app/scheduler/tasks.py
import random
from datetime import date
from aiogram import Bot
from app.db.database import (
    get_cleaning_candidates, get_all_rooms, get_all_resident_ids,
    add_schedule_entry, update_resident_cleaning_stats,
    get_uncompleted_duties_for_today, get_overdue_duties
)
from app.keyboards.inline import get_confirm_keyboard
from app.config import OVERDUE_MESSAGES

async def assign_duties(bot: Bot):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å–º–µ–Ω—É."""
    print("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö...")
    
    candidates = await get_cleaning_candidates()
    rooms = await get_all_rooms()

    if len(candidates) < len(rooms):
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤.")
        return

    # --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö ---
    chosen_residents = random.sample(candidates, len(rooms))
    shuffled_rooms = list(rooms)
    random.shuffle(shuffled_rooms)
    
    assignments = []
    temp_assignments = {} # {resident_id: room_id}

    # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    for i, resident in enumerate(chosen_residents):
        temp_assignments[resident['id']] = shuffled_rooms[i]['id']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (—É–±–æ—Ä–∫–∞ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–¥—Ä—è–¥)
    for i, resident in enumerate(chosen_residents):
        res_id = resident['id']
        room_id = temp_assignments[res_id]
        if resident['last_cleaned_room_id'] == room_id:
            # –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –¥–ª—è –æ–±–º–µ–Ω–∞
            swap_candidate_idx = (i + 1) % len(chosen_residents)
            swap_res_id = chosen_residents[swap_candidate_idx]['id']
            
            # –û–±–º–µ–Ω –∫–æ–º–Ω–∞—Ç–∞–º–∏
            temp_assignments[res_id], temp_assignments[swap_res_id] = temp_assignments[swap_res_id], temp_assignments[res_id]

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–æ–±—ä–µ–∫—Ç –∂–∏—Ç–µ–ª—è, –æ–±—ä–µ–∫—Ç –∫–æ–º–Ω–∞—Ç—ã)
    resident_map = {res['id']: res for res in chosen_residents}
    room_map = {room['id']: room for room in rooms}
    assignments_with_data = [(resident_map[res_id], room_map[room_id]) for res_id, room_id in temp_assignments.items()]
    
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    week_start_date = date.today()
    notifications_to_send = []

    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –≤ –ë–î
    for resident, room in assignments_with_data:
        schedule_id = await add_schedule_entry(resident['id'], room['id'], week_start_date)
        if resident['telegram_id']:
            notifications_to_send.append({
                'telegram_id': resident['telegram_id'],
                'resident_name': resident['name'],
                'room_name': room['name'],
                'schedule_id': schedule_id
            })

    # 2. –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∂–∏—Ç–µ–ª–µ–π
    all_resident_ids = await get_all_resident_ids()
    assigned_id_pairs = [(res['id'], room['id']) for res, room in assignments_with_data]
    await update_resident_cleaning_stats(assigned_id_pairs, all_resident_ids)
    
    # 3. –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for notification in notifications_to_send:
        try:
            message = (f"üßπ –ù–æ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!\n\n"
                       f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å: **{notification['room_name']}**.\n\n"
                       "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
            await bot.send_message(
                chat_id=notification['telegram_id'],
                text=message,
                reply_markup=get_confirm_keyboard(notification['schedule_id'])
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∂–∏—Ç–µ–ª—é {notification['resident_name']}: {e}")
    
    print(f"–î–µ–∂—É—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.")


async def send_reminders(bot: Bot):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    print("Sending reminders...")
    duties = await get_uncompleted_duties_for_today()
    for duty in duties:
        if duty['telegram_id']:
            try:
                message = (f"üëã **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —É–±–æ—Ä–∫–µ!**\n\n"
                           f"–ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å: **{duty['room_name']}**.\n"
                           "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
                await bot.send_message(
                    chat_id=duty['telegram_id'],
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=get_confirm_keyboard(duty['id'])
                )
            except Exception as e:
                print(f"Failed to send reminder to {duty['resident_name']}: {e}")


async def send_overdue_reminders(bot: Bot):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    print("Sending overdue reminders...")
    duties = await get_overdue_duties()
    for duty in duties:
        if duty['telegram_id']:
            try:
                message = random.choice(OVERDUE_MESSAGES).format(room_name=duty['room_name'])
                await bot.send_message(
                    chat_id=duty['telegram_id'],
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=get_confirm_keyboard(duty['id'])
                )
            except Exception as e:
                print(f"Failed to send overdue reminder to {duty['resident_name']}: {e}")