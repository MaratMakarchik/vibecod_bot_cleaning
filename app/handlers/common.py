# app/handlers/common.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram import Bot
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from app.db.database import get_resident_by_tg_id, get_average_ratings, get_current_week_schedule
from app.db.database import get_uncompleted_duties_for_today
from app.keyboards.inline import get_confirm_keyboard

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    user = await get_resident_by_tg_id(message.from_user.id)
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user[1]}! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏ –ø–æ —É–±–æ—Ä–∫–µ.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/schedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —É–±–æ—Ä–∫–∏\n"
            "/ratings - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —É–±–æ—Ä–æ–∫\n"
            "/confirmation - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–±–æ—Ä–∫–∏"
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏. –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ **–∏–º—è** (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ –∂–∏–ª—å—Ü–æ–≤), —á—Ç–æ–±—ã —è –º–æ–≥ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å."
        )

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /schedule
@router.message(F.text == "/schedule")
async def cmd_schedule(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await get_resident_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–º—è.")
        return

    schedule_data = await get_current_week_schedule()

    if not schedule_data:
        await message.answer("üßπ –ü–ª–∞–Ω —É–±–æ—Ä–∫–∏ –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        return

    response = "üóìÔ∏è **–ü–ª–∞–Ω —É–±–æ—Ä–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É:**\n\n"
    for duty in schedule_data:
        status_icon = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if duty['is_completed'] else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        response += f"**{duty['room_name']}**: {duty['resident_name']} ({status_icon})\n"
    
    await message.answer(response)


@router.message(F.text == "/ratings")
async def cmd_ratings(message: Message):
    user = await get_resident_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–º—è.")
        return
        
    ratings = await get_average_ratings()
    if not ratings:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.")
        return
    
    response = "üèÜ **–†–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —É–±–æ—Ä–æ–∫** üèÜ\n\n"
    for r in ratings:
        avg_rating = r['avg_rating'] if r['avg_rating'] is not None else 0
        star_rating = "‚≠ê" * int(round(avg_rating)) + "‚òÜ" * (5 - int(round(avg_rating)))
        response += f"**{r['name']}**: {avg_rating:.2f}/5.00 ({star_rating}) - *–æ—Ü–µ–Ω–æ–∫: {r['total_ratings']}*\n"
        
    await message.answer(response, parse_mode="Markdown")

@router.message(F.text == "/confirmation")
async def cmd_ratings(message: Message, bot: Bot):
    duties = await get_uncompleted_duties_for_today()
    for duty in duties:
        if duty['telegram_id']:
            try:
                message1 = (f"üëã **–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—Ä–æ—à–æ —É–±—Ä–∞–ª—Å—è ?**\n\n"
                           f"–ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å: **{duty['room_name']}**.\n"
                           "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
                await bot.send_message(
                    chat_id=duty['telegram_id'],
                    text=message1,
                    parse_mode="Markdown",
                    reply_markup=get_confirm_keyboard(duty['id'])
                )
            except Exception as e:
                print(f"Failed to send reminder to {duty['resident_name']}: {e}")
        else:
            has_conf = True
        if has_conf:
            try:
                message2 = "–ß—É–≤–∞–∫, —Ç–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ —É–±–æ—Ä–∫—É"
                await message.answer(message2)
            except Exception as e:
                print(f"Failed to send notification about unregistered residents: {e}")

        