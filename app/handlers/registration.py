# app/handlers/registration.py
from aiogram import Router, F
from aiogram.types import Message
from app.db.database import get_resident_by_name, register_user, get_resident_by_tg_id

router = Router()

@router.message(F.text)
async def process_registration(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    existing_user = await get_resident_by_tg_id(message.from_user.id)
    if existing_user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /start.")
        return

    name = message.text.strip()
    resident = await get_resident_by_name(name)

    if resident:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∏–º telegram_id
        if resident[2] is not None:
            await message.answer("–≠—Ç–æ—Ç –∂–∏—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await register_user(resident_id=resident[0], telegram_id=message.from_user.id)
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ, {resident[1]}! üéâ\n"
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö.\n"
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏ /start."
            )
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∂–∏–ª—å—Ü–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º—è –Ω–∞–ø–∏—Å–∞–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫.")